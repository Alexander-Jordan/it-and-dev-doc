What I Learned From pwn.college - embryoio

(N) = Note
(S) = Script
(T) = Terminal

BASH:
	HOW TO CREATE & RUN A SCRIPT:
	1. (T): touch script.sh
	2. (T): nano script.sh
	3. (S):
		#!/bin/bash
		
		function testFunction {
			echo "Test script"
		}
		
		usage
	4. (T) sudo chmod +x script.sh
	5. (T) ./script.sh

C:
	HOW TO CREATE & RUN A SCRIPT:
	1. (T): touch script.c
	2. (T): nano script.c
	3. (S):
		#inlcude <stdio.h>
		
		void testFunction () {
			printf("Test script");
		}
		
		int main () {
			testFunction();
			return 0;
		}
	4. (T): gcc -o script script.c
	5. (T): ./script
	
	HOW TO CREATE PARENT/CHILD PROCESS & EXECUTE SCRIPTS IN A SCRIPT:
	(N):
		If this is a check for the *parent* process, keep in mind that the exec() family of system calls
		does NOT result in a parent-child relationship. The exec()ed process simply replaces the exec()ing
		process. Parent-child relationships are created when a process fork()s off a child-copy of itself,
		and the child-copy can then execve() a process that will be the new child. If we're checking for a
		parent process, that's how you make that relationship.
	(S):
		#include <stdio.h>
		#include <sys/types.h>
		#include <unistd.h>
		#include <sys/wait.h>

		int pwncollege() {
			char *binaryPath = "/path/to/other-script";
			char *args[] = {"script", "first-argument", NULL};	/* args array must end with NULL, and preferably start with script file name */
			char *env[] = {"FIRST-ENV-VARIABLE-KEY=value", NULL};	/* env array must end with NULL */

			int pid = fork();	/* makes a copy of this process, which is trackable through returned int (can also use pid_t instead of int) */

			if (pid < 0) {
				printf("Fork failed\n");	/* if fork return -1 on the parent, no child process is created since it failed */
				return 1;
			} else if (pid == 0) {
				printf("Executing script...\n");	/* The PID of the child process is returned in the parent, while 0 is returned on the child */
				execve(binaryPath, args, env);
				perror("execve");	/* execve() returns only on error */
				printf("\nDone!\n");
				} else {
					wait(NULL);	/* The PID of the child process is returned in the parent and is unique, so that's why else is used here */
					printf("Child is done\n");
				}
			return 0;
		}

		int main() {
			return pwncollege();
		}
	
Python:
	HOW TO CREATE & RUN A SCRIPT:
	1. (T): touch script.py
	2. (T): nano script.py
	3. (S):
		print('Test script')
	4. (T): python script.py

	HOW TO CREATE SUBPROCESS & EXECUTE SCRIPTS IN A SCRIPT:
	(S):
		import subprocess
		p1 = subprocess.Popen(["sed", "s/INFO/info/"], stdin=subprocess.PIPE)
		p2 = subprocess.run(["/challenge/embryoio_level50"], shell=False, stdout=p1.stdin)

